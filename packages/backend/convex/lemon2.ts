import { internalQuery, mutation, query } from "./_generated/server";
import { v } from "convex/values";
import { createCustomer, listCustomers } from "@lemonsqueezy/lemonsqueezy.js";
import { api, internal } from "./_generated/api";
import { lemonSqueezyStoreId } from "@packages/ui";

interface User {
    _id: string;
    userId: string;
    email: string;
    name?: string;
    lemonSqueezyId?: string;
}

// ‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
export const getUser = internalQuery({
  args: { userId: v.string() },
  handler: async (ctx, { userId }) => {
    return await ctx.db
      .query("users")
      .withIndex("by_userId", (q) => q.eq("userId", userId))
      .first();
  },
});

// ‚úÖ –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ LemonSqueezy (–µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
export const registerUserInLemonSqueezy = mutation({
  args: { userId: v.string(), email: v.string(), name: v.optional(v.string()) },
  handler: async (ctx, { userId, email, name }): Promise<string> => {
    // if (!userId) return null;
    // userId
    console.log(
      "üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ LemonSqueezy:",
      email,
    );

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Convex
    const existingUser: User | null = await ctx.runQuery(internal.lemon2.getUser, { userId });
    //   const userId = await getUserId(ctx);
    // const userId = await getUserId(ctx);
    // ‚úÖ –ï—Å–ª–∏ –µ—Å—Ç—å ID –∏–∑ LemonSqueezy, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (existingUser?.lemonSqueezyId) {
      console.log(
        "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ LemonSqueezy:",
        existingUser.lemonSqueezyId,
      );
      return existingUser.lemonSqueezyId;
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ LemonSqueezy
    const { data: existingCustomers, error } = await listCustomers({
      filter: {
        email,
      },
    });

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ LemonSqueezy:", error);
      throw new Error(error.message);
    }

    if (existingCustomers.data?.length > 0) {
      const lemonUser = existingCustomers.data[0];
      console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ LemonSqueezy:", lemonUser.id);

      // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –≤ Convex
      await ctx.db.insert("users", {
        userId,
        email,
        name,
        lemonSqueezyId: lemonUser.id,
      });

      return lemonUser.id;
    }

    // ‚úÖ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
    try {
      const { data, error } = await createCustomer(lemonSqueezyStoreId,{
        // store_id: process.env.LEMON_SQUEEZY_STORE_ID,
        email,
        name: name || "User",
      });

      if (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ LemonSqueezy:", error.message);
        throw new Error(error.message);
      }

      console.log("‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ LemonSqueezy:", data);

      // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ Convex
      await ctx.db.insert("users", {
        userId,
        email,
        name,
        lemonSqueezyId: data.data?.id,
      });

      return data.data?.id;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ LemonSqueezy:", error);
      throw new Error("Failed to create LemonSqueezy customer");
    }
  },
});
